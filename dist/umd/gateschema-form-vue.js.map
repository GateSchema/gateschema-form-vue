{"version":3,"file":"gateschema-form-vue.js","sources":["../../src/store.js","../../src/createForm.js"],"sourcesContent":["import Vue from 'vue'\r\n\r\nconst state = {}\r\nconst mutations = {\r\n  setValueOfFormPath(state, {name, path, value, parentValue, key}) {\r\n    if (path === '/') {\r\n      Vue.set(state, name, value)\r\n    } else {\r\n      Vue.set(parentValue, key, value)\r\n    }\r\n  }\r\n}\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  mutations\r\n}","import defaultTransformer from 'gateschema-transformer'\r\n\r\nfunction debounce(func, wait) {\r\n  let tId\r\n  return function() {\r\n    clearTimeout(tId)\r\n    tId = setTimeout(() => {\r\n      tId = null\r\n      func.apply(this, arguments)\r\n    }, wait)\r\n  }\r\n}\r\n\r\nexport function createDForm(options = {}) {\r\n  const { StateForm, transformer = defaultTransformer, vuexModuleName = 'form' } = options\r\n\r\n  return {\r\n    data() {\r\n      return {\r\n        activePaths: {},\r\n        validationOptions: {\r\n          skipAsync: true,\r\n          useCache: true,\r\n        },\r\n        submitValidationOptions: {\r\n          useCache: true\r\n        },\r\n        pathValidationOptions: {},\r\n        // formState: null,\r\n        // cache: {}\r\n        // errors: []\r\n      }\r\n    },\r\n    props: {\r\n      schema: {\r\n        type: Object\r\n      },\r\n      value: {},\r\n      name: {},\r\n      debounce: {\r\n        type: Number\r\n      },\r\n      ignoreErrors: {\r\n        type: Object,\r\n        default() {\r\n          return {\r\n            map: true,\r\n            list: true\r\n          }\r\n        }\r\n      }\r\n    },\r\n    methods: {\r\n      setValueOfFormPath(path, value, parentValue, key) {\r\n        if (path === '/') {\r\n          this.$emit('input', value)\r\n        } else {\r\n          this.$parent.$set(parentValue, key, value)\r\n        }\r\n      },\r\n      transformNode(node, parentNode) {\r\n        const { activePaths, ignoreErrors } = this\r\n        const {path, error, value, constraints} = node\r\n        const {type, other = {}} = constraints\r\n        const form = other.form || {}\r\n\r\n        if (form.hidden) {\r\n          return\r\n        }\r\n        let errorMsg\r\n\r\n        // collect error\r\n        if (error && !ignoreErrors[error.keyword]) {\r\n          this.errors.push(error)\r\n          errorMsg = error.msg\r\n        }\r\n\r\n        const formItem =  Object.assign({}, form, {\r\n          path,\r\n          required: constraints.required,\r\n          error: (activePaths[path] && errorMsg) || undefined,\r\n          value,\r\n          children: node.children,\r\n          option: constraints.option\r\n        })\r\n\r\n\r\n        const componentMap = {\r\n          list: 'List',\r\n          map: 'Map',\r\n          string: 'Input',\r\n          number: 'InputNumber',\r\n          boolean: 'Switch',\r\n          enumList: 'Checkbox',\r\n          enum: 'Radio'\r\n        }\r\n\r\n        let component = formItem.component || (path === '/' ? 'Form' :  componentMap[type])\r\n\r\n\r\n        if (component === 'Select' && type === 'enumList') {\r\n          formItem.multiple = true\r\n        }\r\n\r\n        if (!formItem.label && parentNode && parentNode.constraints.type !== 'list') {\r\n          formItem.label = path.slice(path.lastIndexOf('/') + 1)\r\n        }\r\n\r\n        formItem.component = component\r\n\r\n        this.cache[path] = {\r\n          type,\r\n          item: formItem\r\n        }\r\n        return formItem\r\n      },\r\n      setFormState(formState) {\r\n        this.formState = formState\r\n        this.$forceUpdate()\r\n      },\r\n      updateValue(path, value, noDebounce) {\r\n        const rootData = this.value\r\n        const keys = path.split('/').slice(1)\r\n        const length = keys.length\r\n        if (length === 0) {\r\n          return this.setValueOfFormPath('/', value)\r\n        }\r\n        let target = rootData || {}\r\n        if (target !== rootData) {\r\n          this.setValueOfFormPath('/', target)\r\n        }\r\n\r\n        const lastIndex = length - 1\r\n        let currentPath = ''\r\n        for(let i = 0; i < length; i++) {\r\n          const key = keys[i]\r\n          currentPath += ('/' + key)\r\n          if (i < lastIndex) {\r\n            let child = target[key]\r\n            if (child == null || typeof child !== 'object') {\r\n              child = this.cache[currentPath].type === 'list' ? [] : {}\r\n              this.setValueOfFormPath(currentPath, child, target, key)\r\n            }\r\n            target = child\r\n          } else {\r\n            this.setValueOfFormPath(currentPath, value, target, key)\r\n          }\r\n        }\r\n        this.$nextTick(() => {\r\n          const options = {\r\n            cb: () => {\r\n              this.$emit('update', this.errors)\r\n            }\r\n          }\r\n          return noDebounce ? this.renderSchema(options) : this.renderSchemaDebounced(options)\r\n        })\r\n      },\r\n      handleUserInput(path, value, index) {\r\n        let noDebounce = false\r\n        const type = this.cache[path].type\r\n        if (type === 'string' && value === '') {\r\n          value = undefined\r\n        } else if (type === 'list') {\r\n          noDebounce = true\r\n          if (typeof index !== 'undefined') {\r\n            const activePaths = this.activePaths\r\n            const newActivePaths = {}\r\n            const activePathsOfOldValue = []\r\n            const prefix = path + '/'\r\n            Object.keys(activePaths).forEach(key => {\r\n              if (key.indexOf(prefix) === 0) {\r\n                activePathsOfOldValue.push(key)\r\n              } else {\r\n                newActivePaths[key] = true\r\n              }\r\n            })\r\n            const regex = new RegExp('^' + path + '\\\\/(\\\\d)(\\\\/.*)?')\r\n            let match\r\n            let idx\r\n            let appendix\r\n            activePathsOfOldValue.forEach(oldKey => {\r\n              match = oldKey.match(regex)\r\n              idx = ~~match[1]\r\n              appendix = match[2] || ''\r\n              if (idx < index) {\r\n                newActivePaths[oldKey] = true\r\n              } else if (idx > index) {\r\n                newActivePaths[prefix + (idx - 1) + appendix] = true\r\n              }\r\n            })\r\n            this.activePaths = newActivePaths\r\n          }\r\n        }\r\n        this.activePaths[path] = true\r\n        this.pathValidationOptions = {\r\n          [path]: {\r\n            skipAsync: false\r\n          }\r\n        }\r\n        this.updateValue(path, value, noDebounce)\r\n      },\r\n      handleSubmit() {\r\n        const activePaths = this.activePaths\r\n        Object.keys(this.cache).forEach(key => {\r\n          activePaths[key] = true\r\n        })\r\n        this.renderSchema({\r\n          validationOptions: this.submitValidationOptions,\r\n          cb: () => {\r\n            this.$emit('submit', this.errors)\r\n          }\r\n        })\r\n      },\r\n      handleReset() {\r\n        this.$emit('reset')\r\n      },\r\n      renderSchema(options={}) {\r\n        const {cb,\r\n          validationOptions = this.validationOptions,\r\n          pathValidationOptions = this.pathValidationOptions\r\n        } = options\r\n        this.errors = []\r\n        this.cache = {}\r\n        const transformOptions = {\r\n          path: '/',\r\n          value: this.value,\r\n          rootData: this.value,\r\n          validationOptions,\r\n          pathValidationOptions,\r\n          transform: this.transformNode,\r\n        }\r\n        transformer.transform(this.schema, transformOptions, (formState) => {\r\n          this.setFormState(formState)\r\n          return cb && cb()\r\n        })\r\n      },\r\n    },\r\n    render(h) {\r\n      return h(StateForm, {\r\n        props: {\r\n          state: this.formState,\r\n        },\r\n        on: {\r\n          submit: this.handleSubmit,\r\n          reset: this.handleReset,\r\n          input: this.handleUserInput\r\n        }\r\n      }, this.$slots.default)\r\n    },\r\n    created() {\r\n      if (this.name) {\r\n        const name = this.name\r\n        const mutationsName = vuexModuleName + '/setValueOfFormPath'\r\n        this.setValueOfFormPath = function(path, value, parentValue, key) {\r\n          this.$store.commit(mutationsName, {\r\n            name,\r\n            path,\r\n            value,\r\n            parentValue,\r\n            key\r\n          })\r\n        }\r\n      }\r\n\r\n      this.$watch('schema', {\r\n        handler: this.renderSchema\r\n      })\r\n\r\n      this.$watch('value', {\r\n        handler: this.renderSchema\r\n      })\r\n\r\n      this.renderSchemaDebounced = this.debounce \r\n        ? debounce(this.renderSchema, this.debounce) \r\n        : this.renderSchema\r\n      \r\n      if (this.schema) {\r\n        this.renderSchemaDebounced()\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default createDForm\r\n"],"names":["namespaced","state","mutations","setValueOfFormPath","name","path","value","parentValue","key","Vue","set","options","StateForm","transformer","defaultTransformer","vuexModuleName","data","activePaths","validationOptions","skipAsync","useCache","submitValidationOptions","pathValidationOptions","props","schema","type","Object","debounce","Number","ignoreErrors","default","map","list","methods","$emit","$parent","$set","transformNode","node","parentNode","this","error","constraints","other","form","hidden","errorMsg","keyword","errors","push","msg","formItem","assign","required","undefined","children","option","component","string","number","boolean","enumList","enum","multiple","label","slice","lastIndexOf","cache","item","setFormState","formState","$forceUpdate","updateValue","noDebounce","rootData","keys","split","length","target","lastIndex","currentPath","i","child","_typeof","$nextTick","cb","_this2","renderSchema","renderSchemaDebounced","handleUserInput","index","newActivePaths","activePathsOfOldValue","prefix","forEach","indexOf","match","idx","appendix","regex","RegExp","oldKey","handleSubmit","_this3","handleReset","transformOptions","transform","_this4","render","h","on","submit","reset","input","$slots","created","mutationsName","$store","commit","func","wait","tId","$watch","handler","clearTimeout","setTimeout","apply","_this","arguments"],"mappings":"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"}